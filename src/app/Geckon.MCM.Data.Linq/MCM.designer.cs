#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Geckon.MCM.Data.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MCM")]
	public partial class MCMDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessPoint(AccessPoint instance);
    partial void UpdateAccessPoint(AccessPoint instance);
    partial void DeleteAccessPoint(AccessPoint instance);
    partial void InsertObjectType(ObjectType instance);
    partial void UpdateObjectType(ObjectType instance);
    partial void DeleteObjectType(ObjectType instance);
    partial void InsertAccessPoint_Group_Join(AccessPoint_Group_Join instance);
    partial void UpdateAccessPoint_Group_Join(AccessPoint_Group_Join instance);
    partial void DeleteAccessPoint_Group_Join(AccessPoint_Group_Join instance);
    partial void InsertAccessPoint_Object_Join(AccessPoint_Object_Join instance);
    partial void UpdateAccessPoint_Object_Join(AccessPoint_Object_Join instance);
    partial void DeleteAccessPoint_Object_Join(AccessPoint_Object_Join instance);
    partial void InsertAccessPoint_User_Join(AccessPoint_User_Join instance);
    partial void UpdateAccessPoint_User_Join(AccessPoint_User_Join instance);
    partial void DeleteAccessPoint_User_Join(AccessPoint_User_Join instance);
    partial void InsertAccessProvider(AccessProvider instance);
    partial void UpdateAccessProvider(AccessProvider instance);
    partial void DeleteAccessProvider(AccessProvider instance);
    partial void InsertConversion(Conversion instance);
    partial void UpdateConversion(Conversion instance);
    partial void DeleteConversion(Conversion instance);
    partial void InsertDestination(Destination instance);
    partial void UpdateDestination(Destination instance);
    partial void DeleteDestination(Destination instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertFolder(Folder instance);
    partial void UpdateFolder(Folder instance);
    partial void DeleteFolder(Folder instance);
    partial void InsertFolder_Group_Join(Folder_Group_Join instance);
    partial void UpdateFolder_Group_Join(Folder_Group_Join instance);
    partial void DeleteFolder_Group_Join(Folder_Group_Join instance);
    partial void InsertFolder_User_Join(Folder_User_Join instance);
    partial void UpdateFolder_User_Join(Folder_User_Join instance);
    partial void DeleteFolder_User_Join(Folder_User_Join instance);
    partial void InsertFolderType(FolderType instance);
    partial void UpdateFolderType(FolderType instance);
    partial void DeleteFolderType(FolderType instance);
    partial void InsertFormat(Format instance);
    partial void UpdateFormat(Format instance);
    partial void DeleteFormat(Format instance);
    partial void InsertFormatCategory(FormatCategory instance);
    partial void UpdateFormatCategory(FormatCategory instance);
    partial void DeleteFormatCategory(FormatCategory instance);
    partial void InsertFormatType(FormatType instance);
    partial void UpdateFormatType(FormatType instance);
    partial void DeleteFormatType(FormatType instance);
    partial void InsertLanguage(Language instance);
    partial void UpdateLanguage(Language instance);
    partial void DeleteLanguage(Language instance);
    partial void InsertMetadata(Metadata instance);
    partial void UpdateMetadata(Metadata instance);
    partial void DeleteMetadata(Metadata instance);
    partial void InsertMetadataSchema(MetadataSchema instance);
    partial void UpdateMetadataSchema(MetadataSchema instance);
    partial void DeleteMetadataSchema(MetadataSchema instance);
    partial void InsertMetadataSchema_Group_Join(MetadataSchema_Group_Join instance);
    partial void UpdateMetadataSchema_Group_Join(MetadataSchema_Group_Join instance);
    partial void DeleteMetadataSchema_Group_Join(MetadataSchema_Group_Join instance);
    partial void InsertMetadataSchema_User_Join(MetadataSchema_User_Join instance);
    partial void UpdateMetadataSchema_User_Join(MetadataSchema_User_Join instance);
    partial void DeleteMetadataSchema_User_Join(MetadataSchema_User_Join instance);
    partial void InsertObject(Object instance);
    partial void UpdateObject(Object instance);
    partial void DeleteObject(Object instance);
    partial void InsertObject_Folder_Join(Object_Folder_Join instance);
    partial void UpdateObject_Folder_Join(Object_Folder_Join instance);
    partial void DeleteObject_Folder_Join(Object_Folder_Join instance);
    partial void InsertObject_Object_Join(Object_Object_Join instance);
    partial void UpdateObject_Object_Join(Object_Object_Join instance);
    partial void DeleteObject_Object_Join(Object_Object_Join instance);
    partial void InsertObjectRelationType(ObjectRelationType instance);
    partial void UpdateObjectRelationType(ObjectRelationType instance);
    partial void DeleteObjectRelationType(ObjectRelationType instance);
    #endregion
		
		public MCMDataContext() : 
				base(global::Geckon.MCM.Data.Linq.Properties.Settings.Default.MCMConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MCMDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MCMDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MCMDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MCMDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessPoint> AccessPoints
		{
			get
			{
				return this.GetTable<AccessPoint>();
			}
		}
		
		public System.Data.Linq.Table<ObjectType> ObjectTypes
		{
			get
			{
				return this.GetTable<ObjectType>();
			}
		}
		
		public System.Data.Linq.Table<AccessPoint_Group_Join> AccessPoint_Group_Joins
		{
			get
			{
				return this.GetTable<AccessPoint_Group_Join>();
			}
		}
		
		public System.Data.Linq.Table<AccessPoint_Object_Join> AccessPoint_Object_Joins
		{
			get
			{
				return this.GetTable<AccessPoint_Object_Join>();
			}
		}
		
		public System.Data.Linq.Table<AccessPoint_User_Join> AccessPoint_User_Joins
		{
			get
			{
				return this.GetTable<AccessPoint_User_Join>();
			}
		}
		
		public System.Data.Linq.Table<AccessProvider> AccessProviders
		{
			get
			{
				return this.GetTable<AccessProvider>();
			}
		}
		
		public System.Data.Linq.Table<Conversion> Conversions
		{
			get
			{
				return this.GetTable<Conversion>();
			}
		}
		
		public System.Data.Linq.Table<Destination> Destinations
		{
			get
			{
				return this.GetTable<Destination>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<Folder> Folders
		{
			get
			{
				return this.GetTable<Folder>();
			}
		}
		
		public System.Data.Linq.Table<Folder_Group_Join> Folder_Group_Joins
		{
			get
			{
				return this.GetTable<Folder_Group_Join>();
			}
		}
		
		public System.Data.Linq.Table<Folder_User_Join> Folder_User_Joins
		{
			get
			{
				return this.GetTable<Folder_User_Join>();
			}
		}
		
		public System.Data.Linq.Table<FolderType> FolderTypes
		{
			get
			{
				return this.GetTable<FolderType>();
			}
		}
		
		public System.Data.Linq.Table<Format> Formats
		{
			get
			{
				return this.GetTable<Format>();
			}
		}
		
		public System.Data.Linq.Table<FormatCategory> FormatCategories
		{
			get
			{
				return this.GetTable<FormatCategory>();
			}
		}
		
		public System.Data.Linq.Table<FormatType> FormatTypes
		{
			get
			{
				return this.GetTable<FormatType>();
			}
		}
		
		public System.Data.Linq.Table<Language> Languages
		{
			get
			{
				return this.GetTable<Language>();
			}
		}
		
		public System.Data.Linq.Table<Metadata> Metadatas
		{
			get
			{
				return this.GetTable<Metadata>();
			}
		}
		
		public System.Data.Linq.Table<MetadataSchema> MetadataSchemas
		{
			get
			{
				return this.GetTable<MetadataSchema>();
			}
		}
		
		public System.Data.Linq.Table<MetadataSchema_Group_Join> MetadataSchema_Group_Joins
		{
			get
			{
				return this.GetTable<MetadataSchema_Group_Join>();
			}
		}
		
		public System.Data.Linq.Table<MetadataSchema_User_Join> MetadataSchema_User_Joins
		{
			get
			{
				return this.GetTable<MetadataSchema_User_Join>();
			}
		}
		
		public System.Data.Linq.Table<Object> Objects
		{
			get
			{
				return this.GetTable<Object>();
			}
		}
		
		public System.Data.Linq.Table<Object_Folder_Join> Object_Folder_Joins
		{
			get
			{
				return this.GetTable<Object_Folder_Join>();
			}
		}
		
		public System.Data.Linq.Table<Object_Object_Join> Object_Object_Joins
		{
			get
			{
				return this.GetTable<Object_Object_Join>();
			}
		}
		
		public System.Data.Linq.Table<ObjectRelationType> ObjectRelationTypes
		{
			get
			{
				return this.GetTable<ObjectRelationType>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PopulateDefaultData")]
		public int PopulateDefaultData()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectType_Insert")]
		public int ObjectType_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectType_Get")]
		public ISingleResult<ObjectType> ObjectType_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value);
			return ((ISingleResult<ObjectType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectType_Update")]
		public int ObjectType_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectType_Delete")]
		public int ObjectType_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Language_Get")]
		public ISingleResult<Language> Language_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageCode", DbType="VarChar(10)")] string languageCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryName", DbType="VarChar(255)")] string countryName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name, languageCode, countryName);
			return ((ISingleResult<Language>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Language_Create")]
		public int Language_Create([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageCode", DbType="VarChar(10)")] string languageCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryName", DbType="VarChar(255)")] string countryName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, languageCode, countryName, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Language_Delete")]
		public int Language_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Language_Update")]
		public int Language_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LanguageCode", DbType="VarChar(10)")] string languageCode, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CountryName", DbType="VarChar(255)")] string countryName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name, languageCode, countryName, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectRelationType_Get")]
		public ISingleResult<ObjectRelationType> ObjectRelationType_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value);
			return ((ISingleResult<ObjectRelationType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectRelationType_Create")]
		public int ObjectRelationType_Create([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectRelationType_Delete")]
		public int ObjectRelationType_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ObjectRelationType_Update")]
		public int ObjectRelationType_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FolderType_Get")]
		public ISingleResult<FolderType> FolderType_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name);
			return ((ISingleResult<FolderType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FolderType_Delete")]
		public int FolderType_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FolderType_Create")]
		public int FolderType_Create([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FolderType_Update")]
		public int FolderType_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(255)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FormatType_Create")]
		public int FormatType_Create([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FormatType_Delete")]
		public int FormatType_Delete([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FormatType_Update")]
		public int FormatType_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SystemPermission", DbType="Int")] System.Nullable<int> systemPermission)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value, systemPermission);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FormatType_Get")]
		public ISingleResult<FormatType> FormatType_Get([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Int")] System.Nullable<int> iD, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="VarChar(255)")] string value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, value);
			return ((ISingleResult<FormatType>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessPoint")]
	public partial class AccessPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _GUID;
		
		private System.Guid _SubscriptionGUID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AccessPoint_Group_Join> _AccessPoint_Group_Joins;
		
		private EntitySet<AccessPoint_Object_Join> _AccessPoint_Object_Joins;
		
		private EntitySet<AccessPoint_User_Join> _AccessPoint_User_Joins;
		
		private EntityRef<Conversion> _Conversion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnSubscriptionGUIDChanging(System.Guid value);
    partial void OnSubscriptionGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AccessPoint()
		{
			this._AccessPoint_Group_Joins = new EntitySet<AccessPoint_Group_Join>(new Action<AccessPoint_Group_Join>(this.attach_AccessPoint_Group_Joins), new Action<AccessPoint_Group_Join>(this.detach_AccessPoint_Group_Joins));
			this._AccessPoint_Object_Joins = new EntitySet<AccessPoint_Object_Join>(new Action<AccessPoint_Object_Join>(this.attach_AccessPoint_Object_Joins), new Action<AccessPoint_Object_Join>(this.detach_AccessPoint_Object_Joins));
			this._AccessPoint_User_Joins = new EntitySet<AccessPoint_User_Join>(new Action<AccessPoint_User_Join>(this.attach_AccessPoint_User_Joins), new Action<AccessPoint_User_Join>(this.detach_AccessPoint_User_Joins));
			this._Conversion = default(EntityRef<Conversion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._Conversion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionGUID
		{
			get
			{
				return this._SubscriptionGUID;
			}
			set
			{
				if ((this._SubscriptionGUID != value))
				{
					this.OnSubscriptionGUIDChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionGUID = value;
					this.SendPropertyChanged("SubscriptionGUID");
					this.OnSubscriptionGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessPoint_AccessPoint_Group_Join", Storage="_AccessPoint_Group_Joins", ThisKey="ID", OtherKey="AcessPointID")]
		public EntitySet<AccessPoint_Group_Join> AccessPoint_Group_Joins
		{
			get
			{
				return this._AccessPoint_Group_Joins;
			}
			set
			{
				this._AccessPoint_Group_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessPoint_AccessPoint_Object_Join", Storage="_AccessPoint_Object_Joins", ThisKey="ID", OtherKey="AccessPointID")]
		public EntitySet<AccessPoint_Object_Join> AccessPoint_Object_Joins
		{
			get
			{
				return this._AccessPoint_Object_Joins;
			}
			set
			{
				this._AccessPoint_Object_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessPoint_AccessPoint_User_Join", Storage="_AccessPoint_User_Joins", ThisKey="ID", OtherKey="AccessPointID")]
		public EntitySet<AccessPoint_User_Join> AccessPoint_User_Joins
		{
			get
			{
				return this._AccessPoint_User_Joins;
			}
			set
			{
				this._AccessPoint_User_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Conversion_AccessPoint", Storage="_Conversion", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Conversion Conversion
		{
			get
			{
				return this._Conversion.Entity;
			}
			set
			{
				Conversion previousValue = this._Conversion.Entity;
				if (((previousValue != value) 
							|| (this._Conversion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Conversion.Entity = null;
						previousValue.AccessPoint = null;
					}
					this._Conversion.Entity = value;
					if ((value != null))
					{
						value.AccessPoint = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("Conversion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessPoint_Group_Joins(AccessPoint_Group_Join entity)
		{
			this.SendPropertyChanging();
			entity.AccessPoint = this;
		}
		
		private void detach_AccessPoint_Group_Joins(AccessPoint_Group_Join entity)
		{
			this.SendPropertyChanging();
			entity.AccessPoint = null;
		}
		
		private void attach_AccessPoint_Object_Joins(AccessPoint_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.AccessPoint = this;
		}
		
		private void detach_AccessPoint_Object_Joins(AccessPoint_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.AccessPoint = null;
		}
		
		private void attach_AccessPoint_User_Joins(AccessPoint_User_Join entity)
		{
			this.SendPropertyChanging();
			entity.AccessPoint = this;
		}
		
		private void detach_AccessPoint_User_Joins(AccessPoint_User_Join entity)
		{
			this.SendPropertyChanging();
			entity.AccessPoint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectType")]
	public partial class ObjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private EntitySet<Object> _Objects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ObjectType()
		{
			this._Objects = new EntitySet<Object>(new Action<Object>(this.attach_Objects), new Action<Object>(this.detach_Objects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectType_Object", Storage="_Objects", ThisKey="ID", OtherKey="ObjectTypeID")]
		public EntitySet<Object> Objects
		{
			get
			{
				return this._Objects;
			}
			set
			{
				this._Objects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Objects(Object entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = this;
		}
		
		private void detach_Objects(Object entity)
		{
			this.SendPropertyChanging();
			entity.ObjectType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessPoint_Group_Join")]
	public partial class AccessPoint_Group_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AcessPointID;
		
		private System.Guid _GroupGUID;
		
		private int _Permission;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<AccessPoint> _AccessPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcessPointIDChanging(int value);
    partial void OnAcessPointIDChanged();
    partial void OnGroupGUIDChanging(System.Guid value);
    partial void OnGroupGUIDChanged();
    partial void OnPermissionChanging(int value);
    partial void OnPermissionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AccessPoint_Group_Join()
		{
			this._AccessPoint = default(EntityRef<AccessPoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcessPointID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AcessPointID
		{
			get
			{
				return this._AcessPointID;
			}
			set
			{
				if ((this._AcessPointID != value))
				{
					if (this._AccessPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcessPointIDChanging(value);
					this.SendPropertyChanging();
					this._AcessPointID = value;
					this.SendPropertyChanged("AcessPointID");
					this.OnAcessPointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupGUID
		{
			get
			{
				return this._GroupGUID;
			}
			set
			{
				if ((this._GroupGUID != value))
				{
					this.OnGroupGUIDChanging(value);
					this.SendPropertyChanging();
					this._GroupGUID = value;
					this.SendPropertyChanged("GroupGUID");
					this.OnGroupGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Int NOT NULL")]
		public int Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessPoint_AccessPoint_Group_Join", Storage="_AccessPoint", ThisKey="AcessPointID", OtherKey="ID", IsForeignKey=true)]
		public AccessPoint AccessPoint
		{
			get
			{
				return this._AccessPoint.Entity;
			}
			set
			{
				AccessPoint previousValue = this._AccessPoint.Entity;
				if (((previousValue != value) 
							|| (this._AccessPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessPoint.Entity = null;
						previousValue.AccessPoint_Group_Joins.Remove(this);
					}
					this._AccessPoint.Entity = value;
					if ((value != null))
					{
						value.AccessPoint_Group_Joins.Add(this);
						this._AcessPointID = value.ID;
					}
					else
					{
						this._AcessPointID = default(int);
					}
					this.SendPropertyChanged("AccessPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessPoint_Object_Join")]
	public partial class AccessPoint_Object_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessPointID;
		
		private int _ObjectID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private EntityRef<AccessPoint> _AccessPoint;
		
		private EntityRef<Object> _Object;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessPointIDChanging(int value);
    partial void OnAccessPointIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public AccessPoint_Object_Join()
		{
			this._AccessPoint = default(EntityRef<AccessPoint>);
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessPointID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccessPointID
		{
			get
			{
				return this._AccessPointID;
			}
			set
			{
				if ((this._AccessPointID != value))
				{
					if (this._AccessPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessPointIDChanging(value);
					this.SendPropertyChanging();
					this._AccessPointID = value;
					this.SendPropertyChanged("AccessPointID");
					this.OnAccessPointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessPoint_AccessPoint_Object_Join", Storage="_AccessPoint", ThisKey="AccessPointID", OtherKey="ID", IsForeignKey=true)]
		public AccessPoint AccessPoint
		{
			get
			{
				return this._AccessPoint.Entity;
			}
			set
			{
				AccessPoint previousValue = this._AccessPoint.Entity;
				if (((previousValue != value) 
							|| (this._AccessPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessPoint.Entity = null;
						previousValue.AccessPoint_Object_Joins.Remove(this);
					}
					this._AccessPoint.Entity = value;
					if ((value != null))
					{
						value.AccessPoint_Object_Joins.Add(this);
						this._AccessPointID = value.ID;
					}
					else
					{
						this._AccessPointID = default(int);
					}
					this.SendPropertyChanged("AccessPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_AccessPoint_Object_Join", Storage="_Object", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.AccessPoint_Object_Joins.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.AccessPoint_Object_Joins.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessPoint_User_Join")]
	public partial class AccessPoint_User_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessPointID;
		
		private System.Guid _UserGUID;
		
		private int _Permission;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<AccessPoint> _AccessPoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessPointIDChanging(int value);
    partial void OnAccessPointIDChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnPermissionChanging(int value);
    partial void OnPermissionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AccessPoint_User_Join()
		{
			this._AccessPoint = default(EntityRef<AccessPoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessPointID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AccessPointID
		{
			get
			{
				return this._AccessPointID;
			}
			set
			{
				if ((this._AccessPointID != value))
				{
					if (this._AccessPoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessPointIDChanging(value);
					this.SendPropertyChanging();
					this._AccessPointID = value;
					this.SendPropertyChanged("AccessPointID");
					this.OnAccessPointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Int NOT NULL")]
		public int Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessPoint_AccessPoint_User_Join", Storage="_AccessPoint", ThisKey="AccessPointID", OtherKey="ID", IsForeignKey=true)]
		public AccessPoint AccessPoint
		{
			get
			{
				return this._AccessPoint.Entity;
			}
			set
			{
				AccessPoint previousValue = this._AccessPoint.Entity;
				if (((previousValue != value) 
							|| (this._AccessPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessPoint.Entity = null;
						previousValue.AccessPoint_User_Joins.Remove(this);
					}
					this._AccessPoint.Entity = value;
					if ((value != null))
					{
						value.AccessPoint_User_Joins.Add(this);
						this._AccessPointID = value.ID;
					}
					else
					{
						this._AccessPointID = default(int);
					}
					this.SendPropertyChanged("AccessPoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessProvider")]
	public partial class AccessProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _DestinationID;
		
		private string _BasePath;
		
		private string _StringFormat;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Destination> _Destination;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDestinationIDChanging(int value);
    partial void OnDestinationIDChanged();
    partial void OnBasePathChanging(string value);
    partial void OnBasePathChanged();
    partial void OnStringFormatChanging(string value);
    partial void OnStringFormatChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public AccessProvider()
		{
			this._Destination = default(EntityRef<Destination>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationID", DbType="Int NOT NULL")]
		public int DestinationID
		{
			get
			{
				return this._DestinationID;
			}
			set
			{
				if ((this._DestinationID != value))
				{
					if (this._Destination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationID = value;
					this.SendPropertyChanged("DestinationID");
					this.OnDestinationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasePath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BasePath
		{
			get
			{
				return this._BasePath;
			}
			set
			{
				if ((this._BasePath != value))
				{
					this.OnBasePathChanging(value);
					this.SendPropertyChanging();
					this._BasePath = value;
					this.SendPropertyChanged("BasePath");
					this.OnBasePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringFormat", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StringFormat
		{
			get
			{
				return this._StringFormat;
			}
			set
			{
				if ((this._StringFormat != value))
				{
					this.OnStringFormatChanging(value);
					this.SendPropertyChanging();
					this._StringFormat = value;
					this.SendPropertyChanged("StringFormat");
					this.OnStringFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_AccessProvider", Storage="_Destination", ThisKey="DestinationID", OtherKey="ID", IsForeignKey=true)]
		public Destination Destination
		{
			get
			{
				return this._Destination.Entity;
			}
			set
			{
				Destination previousValue = this._Destination.Entity;
				if (((previousValue != value) 
							|| (this._Destination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Destination.Entity = null;
						previousValue.AccessProviders.Remove(this);
					}
					this._Destination.Entity = value;
					if ((value != null))
					{
						value.AccessProviders.Add(this);
						this._DestinationID = value.ID;
					}
					else
					{
						this._DestinationID = default(int);
					}
					this.SendPropertyChanged("Destination");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Conversion")]
	public partial class Conversion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AccessPointID;
		
		private int _FormatCategoryID;
		
		private int _FormatID;
		
		private int _DestinationID;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<AccessPoint> _AccessPoint;
		
		private EntityRef<Destination> _Destination;
		
		private EntityRef<Format> _Format;
		
		private EntityRef<FormatCategory> _FormatCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccessPointIDChanging(int value);
    partial void OnAccessPointIDChanged();
    partial void OnFormatCategoryIDChanging(int value);
    partial void OnFormatCategoryIDChanged();
    partial void OnFormatIDChanging(int value);
    partial void OnFormatIDChanged();
    partial void OnDestinationIDChanging(int value);
    partial void OnDestinationIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Conversion()
		{
			this._AccessPoint = default(EntityRef<AccessPoint>);
			this._Destination = default(EntityRef<Destination>);
			this._Format = default(EntityRef<Format>);
			this._FormatCategory = default(EntityRef<FormatCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessPointID", DbType="Int NOT NULL")]
		public int AccessPointID
		{
			get
			{
				return this._AccessPointID;
			}
			set
			{
				if ((this._AccessPointID != value))
				{
					this.OnAccessPointIDChanging(value);
					this.SendPropertyChanging();
					this._AccessPointID = value;
					this.SendPropertyChanged("AccessPointID");
					this.OnAccessPointIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatCategoryID", DbType="Int NOT NULL")]
		public int FormatCategoryID
		{
			get
			{
				return this._FormatCategoryID;
			}
			set
			{
				if ((this._FormatCategoryID != value))
				{
					if (this._FormatCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FormatCategoryID = value;
					this.SendPropertyChanged("FormatCategoryID");
					this.OnFormatCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatID", DbType="Int NOT NULL")]
		public int FormatID
		{
			get
			{
				return this._FormatID;
			}
			set
			{
				if ((this._FormatID != value))
				{
					if (this._Format.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatIDChanging(value);
					this.SendPropertyChanging();
					this._FormatID = value;
					this.SendPropertyChanged("FormatID");
					this.OnFormatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationID", DbType="Int NOT NULL")]
		public int DestinationID
		{
			get
			{
				return this._DestinationID;
			}
			set
			{
				if ((this._DestinationID != value))
				{
					if (this._Destination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationID = value;
					this.SendPropertyChanged("DestinationID");
					this.OnDestinationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Conversion_AccessPoint", Storage="_AccessPoint", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public AccessPoint AccessPoint
		{
			get
			{
				return this._AccessPoint.Entity;
			}
			set
			{
				AccessPoint previousValue = this._AccessPoint.Entity;
				if (((previousValue != value) 
							|| (this._AccessPoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessPoint.Entity = null;
						previousValue.Conversion = null;
					}
					this._AccessPoint.Entity = value;
					if ((value != null))
					{
						value.Conversion = this;
					}
					this.SendPropertyChanged("AccessPoint");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Conversion", Storage="_Destination", ThisKey="DestinationID", OtherKey="ID", IsForeignKey=true)]
		public Destination Destination
		{
			get
			{
				return this._Destination.Entity;
			}
			set
			{
				Destination previousValue = this._Destination.Entity;
				if (((previousValue != value) 
							|| (this._Destination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Destination.Entity = null;
						previousValue.Conversions.Remove(this);
					}
					this._Destination.Entity = value;
					if ((value != null))
					{
						value.Conversions.Add(this);
						this._DestinationID = value.ID;
					}
					else
					{
						this._DestinationID = default(int);
					}
					this.SendPropertyChanged("Destination");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Format_Conversion", Storage="_Format", ThisKey="FormatID", OtherKey="ID", IsForeignKey=true)]
		public Format Format
		{
			get
			{
				return this._Format.Entity;
			}
			set
			{
				Format previousValue = this._Format.Entity;
				if (((previousValue != value) 
							|| (this._Format.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Format.Entity = null;
						previousValue.Conversions.Remove(this);
					}
					this._Format.Entity = value;
					if ((value != null))
					{
						value.Conversions.Add(this);
						this._FormatID = value.ID;
					}
					else
					{
						this._FormatID = default(int);
					}
					this.SendPropertyChanged("Format");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormatCategory_Conversion", Storage="_FormatCategory", ThisKey="FormatCategoryID", OtherKey="ID", IsForeignKey=true)]
		public FormatCategory FormatCategory
		{
			get
			{
				return this._FormatCategory.Entity;
			}
			set
			{
				FormatCategory previousValue = this._FormatCategory.Entity;
				if (((previousValue != value) 
							|| (this._FormatCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormatCategory.Entity = null;
						previousValue.Conversions.Remove(this);
					}
					this._FormatCategory.Entity = value;
					if ((value != null))
					{
						value.Conversions.Add(this);
						this._FormatCategoryID = value.ID;
					}
					else
					{
						this._FormatCategoryID = default(int);
					}
					this.SendPropertyChanged("FormatCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Destination")]
	public partial class Destination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _SubscriptionGUID;
		
		private string _Title;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AccessProvider> _AccessProviders;
		
		private EntitySet<Conversion> _Conversions;
		
		private EntitySet<File> _Files;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubscriptionGUIDChanging(System.Guid value);
    partial void OnSubscriptionGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Destination()
		{
			this._AccessProviders = new EntitySet<AccessProvider>(new Action<AccessProvider>(this.attach_AccessProviders), new Action<AccessProvider>(this.detach_AccessProviders));
			this._Conversions = new EntitySet<Conversion>(new Action<Conversion>(this.attach_Conversions), new Action<Conversion>(this.detach_Conversions));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionGUID
		{
			get
			{
				return this._SubscriptionGUID;
			}
			set
			{
				if ((this._SubscriptionGUID != value))
				{
					this.OnSubscriptionGUIDChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionGUID = value;
					this.SendPropertyChanged("SubscriptionGUID");
					this.OnSubscriptionGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_AccessProvider", Storage="_AccessProviders", ThisKey="ID", OtherKey="DestinationID")]
		public EntitySet<AccessProvider> AccessProviders
		{
			get
			{
				return this._AccessProviders;
			}
			set
			{
				this._AccessProviders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_Conversion", Storage="_Conversions", ThisKey="ID", OtherKey="DestinationID")]
		public EntitySet<Conversion> Conversions
		{
			get
			{
				return this._Conversions;
			}
			set
			{
				this._Conversions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_File", Storage="_Files", ThisKey="ID", OtherKey="DestinationID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessProviders(AccessProvider entity)
		{
			this.SendPropertyChanging();
			entity.Destination = this;
		}
		
		private void detach_AccessProviders(AccessProvider entity)
		{
			this.SendPropertyChanging();
			entity.Destination = null;
		}
		
		private void attach_Conversions(Conversion entity)
		{
			this.SendPropertyChanging();
			entity.Destination = this;
		}
		
		private void detach_Conversions(Conversion entity)
		{
			this.SendPropertyChanging();
			entity.Destination = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Destination = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Destination = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[File]")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ObjectID;
		
		private System.Nullable<int> _ParentID;
		
		private int _FormatID;
		
		private int _DestinationID;
		
		private string _Filename;
		
		private string _OriginalFilename;
		
		private string _FolderPath;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<File> _Files;
		
		private EntityRef<Destination> _Destination;
		
		private EntityRef<File> _File1;
		
		private EntityRef<Format> _Format;
		
		private EntityRef<Object> _Object;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnFormatIDChanging(int value);
    partial void OnFormatIDChanged();
    partial void OnDestinationIDChanging(int value);
    partial void OnDestinationIDChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnOriginalFilenameChanging(string value);
    partial void OnOriginalFilenameChanged();
    partial void OnFolderPathChanging(string value);
    partial void OnFolderPathChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public File()
		{
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Destination = default(EntityRef<Destination>);
			this._File1 = default(EntityRef<File>);
			this._Format = default(EntityRef<Format>);
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL")]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._File1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatID", DbType="Int NOT NULL")]
		public int FormatID
		{
			get
			{
				return this._FormatID;
			}
			set
			{
				if ((this._FormatID != value))
				{
					if (this._Format.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatIDChanging(value);
					this.SendPropertyChanging();
					this._FormatID = value;
					this.SendPropertyChanged("FormatID");
					this.OnFormatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationID", DbType="Int NOT NULL")]
		public int DestinationID
		{
			get
			{
				return this._DestinationID;
			}
			set
			{
				if ((this._DestinationID != value))
				{
					if (this._Destination.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationID = value;
					this.SendPropertyChanged("DestinationID");
					this.OnDestinationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalFilename", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OriginalFilename
		{
			get
			{
				return this._OriginalFilename;
			}
			set
			{
				if ((this._OriginalFilename != value))
				{
					this.OnOriginalFilenameChanging(value);
					this.SendPropertyChanging();
					this._OriginalFilename = value;
					this.SendPropertyChanged("OriginalFilename");
					this.OnOriginalFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderPath", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FolderPath
		{
			get
			{
				return this._FolderPath;
			}
			set
			{
				if ((this._FolderPath != value))
				{
					this.OnFolderPathChanging(value);
					this.SendPropertyChanging();
					this._FolderPath = value;
					this.SendPropertyChanged("FolderPath");
					this.OnFolderPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_File", Storage="_Files", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Destination_File", Storage="_Destination", ThisKey="DestinationID", OtherKey="ID", IsForeignKey=true)]
		public Destination Destination
		{
			get
			{
				return this._Destination.Entity;
			}
			set
			{
				Destination previousValue = this._Destination.Entity;
				if (((previousValue != value) 
							|| (this._Destination.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Destination.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Destination.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._DestinationID = value.ID;
					}
					else
					{
						this._DestinationID = default(int);
					}
					this.SendPropertyChanged("Destination");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="File_File", Storage="_File1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public File File1
		{
			get
			{
				return this._File1.Entity;
			}
			set
			{
				File previousValue = this._File1.Entity;
				if (((previousValue != value) 
							|| (this._File1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File1.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._File1.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("File1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Format_File", Storage="_Format", ThisKey="FormatID", OtherKey="ID", IsForeignKey=true)]
		public Format Format
		{
			get
			{
				return this._Format.Entity;
			}
			set
			{
				Format previousValue = this._Format.Entity;
				if (((previousValue != value) 
							|| (this._Format.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Format.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Format.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._FormatID = value.ID;
					}
					else
					{
						this._FormatID = default(int);
					}
					this.SendPropertyChanged("Format");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_File", Storage="_Object", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.File1 = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.File1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Folder")]
	public partial class Folder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ParentID;
		
		private int _FolderTypeID;
		
		private System.Guid _SubscriptionGUID;
		
		private string _Title;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<Folder> _Folders;
		
		private EntitySet<Folder_Group_Join> _Folder_Group_Joins;
		
		private EntitySet<Folder_User_Join> _Folder_User_Joins;
		
		private EntitySet<Object_Folder_Join> _Object_Folder_Joins;
		
		private EntityRef<Folder> _Folder1;
		
		private EntityRef<FolderType> _FolderType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(int value);
    partial void OnParentIDChanged();
    partial void OnFolderTypeIDChanging(int value);
    partial void OnFolderTypeIDChanged();
    partial void OnSubscriptionGUIDChanging(System.Guid value);
    partial void OnSubscriptionGUIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Folder()
		{
			this._Folders = new EntitySet<Folder>(new Action<Folder>(this.attach_Folders), new Action<Folder>(this.detach_Folders));
			this._Folder_Group_Joins = new EntitySet<Folder_Group_Join>(new Action<Folder_Group_Join>(this.attach_Folder_Group_Joins), new Action<Folder_Group_Join>(this.detach_Folder_Group_Joins));
			this._Folder_User_Joins = new EntitySet<Folder_User_Join>(new Action<Folder_User_Join>(this.attach_Folder_User_Joins), new Action<Folder_User_Join>(this.detach_Folder_User_Joins));
			this._Object_Folder_Joins = new EntitySet<Object_Folder_Join>(new Action<Object_Folder_Join>(this.attach_Object_Folder_Joins), new Action<Object_Folder_Join>(this.detach_Object_Folder_Joins));
			this._Folder1 = default(EntityRef<Folder>);
			this._FolderType = default(EntityRef<FolderType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int NOT NULL")]
		public int ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Folder1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderTypeID", DbType="Int NOT NULL")]
		public int FolderTypeID
		{
			get
			{
				return this._FolderTypeID;
			}
			set
			{
				if ((this._FolderTypeID != value))
				{
					if (this._FolderType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FolderTypeID = value;
					this.SendPropertyChanged("FolderTypeID");
					this.OnFolderTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SubscriptionGUID
		{
			get
			{
				return this._SubscriptionGUID;
			}
			set
			{
				if ((this._SubscriptionGUID != value))
				{
					this.OnSubscriptionGUIDChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionGUID = value;
					this.SendPropertyChanged("SubscriptionGUID");
					this.OnSubscriptionGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Folder", Storage="_Folders", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Folder> Folders
		{
			get
			{
				return this._Folders;
			}
			set
			{
				this._Folders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Folder_Group_Join", Storage="_Folder_Group_Joins", ThisKey="ID", OtherKey="FolderID")]
		public EntitySet<Folder_Group_Join> Folder_Group_Joins
		{
			get
			{
				return this._Folder_Group_Joins;
			}
			set
			{
				this._Folder_Group_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Folder_User_Join", Storage="_Folder_User_Joins", ThisKey="ID", OtherKey="FolderID")]
		public EntitySet<Folder_User_Join> Folder_User_Joins
		{
			get
			{
				return this._Folder_User_Joins;
			}
			set
			{
				this._Folder_User_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Object_Folder_Join", Storage="_Object_Folder_Joins", ThisKey="ID", OtherKey="FolderID")]
		public EntitySet<Object_Folder_Join> Object_Folder_Joins
		{
			get
			{
				return this._Object_Folder_Joins;
			}
			set
			{
				this._Object_Folder_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Folder", Storage="_Folder1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Folder Folder1
		{
			get
			{
				return this._Folder1.Entity;
			}
			set
			{
				Folder previousValue = this._Folder1.Entity;
				if (((previousValue != value) 
							|| (this._Folder1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder1.Entity = null;
						previousValue.Folders.Remove(this);
					}
					this._Folder1.Entity = value;
					if ((value != null))
					{
						value.Folders.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(int);
					}
					this.SendPropertyChanged("Folder1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FolderType_Folder", Storage="_FolderType", ThisKey="FolderTypeID", OtherKey="ID", IsForeignKey=true)]
		public FolderType FolderType
		{
			get
			{
				return this._FolderType.Entity;
			}
			set
			{
				FolderType previousValue = this._FolderType.Entity;
				if (((previousValue != value) 
							|| (this._FolderType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FolderType.Entity = null;
						previousValue.Folders.Remove(this);
					}
					this._FolderType.Entity = value;
					if ((value != null))
					{
						value.Folders.Add(this);
						this._FolderTypeID = value.ID;
					}
					else
					{
						this._FolderTypeID = default(int);
					}
					this.SendPropertyChanged("FolderType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Folders(Folder entity)
		{
			this.SendPropertyChanging();
			entity.Folder1 = this;
		}
		
		private void detach_Folders(Folder entity)
		{
			this.SendPropertyChanging();
			entity.Folder1 = null;
		}
		
		private void attach_Folder_Group_Joins(Folder_Group_Join entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_Folder_Group_Joins(Folder_Group_Join entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
		
		private void attach_Folder_User_Joins(Folder_User_Join entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_Folder_User_Joins(Folder_User_Join entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
		
		private void attach_Object_Folder_Joins(Object_Folder_Join entity)
		{
			this.SendPropertyChanging();
			entity.Folder = this;
		}
		
		private void detach_Object_Folder_Joins(Object_Folder_Join entity)
		{
			this.SendPropertyChanging();
			entity.Folder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Folder_Group_Join")]
	public partial class Folder_Group_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderID;
		
		private System.Guid _GroupGUID;
		
		private int _Permission;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Folder> _Folder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    partial void OnGroupGUIDChanging(System.Guid value);
    partial void OnGroupGUIDChanged();
    partial void OnPermissionChanging(int value);
    partial void OnPermissionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Folder_Group_Join()
		{
			this._Folder = default(EntityRef<Folder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupGUID
		{
			get
			{
				return this._GroupGUID;
			}
			set
			{
				if ((this._GroupGUID != value))
				{
					this.OnGroupGUIDChanging(value);
					this.SendPropertyChanging();
					this._GroupGUID = value;
					this.SendPropertyChanged("GroupGUID");
					this.OnGroupGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Int NOT NULL")]
		public int Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Folder_Group_Join", Storage="_Folder", ThisKey="FolderID", OtherKey="ID", IsForeignKey=true)]
		public Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.Folder_Group_Joins.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.Folder_Group_Joins.Add(this);
						this._FolderID = value.ID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Folder_User_Join")]
	public partial class Folder_User_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FolderID;
		
		private System.Guid _UserGUID;
		
		private int _Permission;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Folder> _Folder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnPermissionChanging(int value);
    partial void OnPermissionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Folder_User_Join()
		{
			this._Folder = default(EntityRef<Folder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Int NOT NULL")]
		public int Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Folder_User_Join", Storage="_Folder", ThisKey="FolderID", OtherKey="ID", IsForeignKey=true)]
		public Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.Folder_User_Joins.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.Folder_User_Joins.Add(this);
						this._FolderID = value.ID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FolderType")]
	public partial class FolderType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<Folder> _Folders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public FolderType()
		{
			this._Folders = new EntitySet<Folder>(new Action<Folder>(this.attach_Folders), new Action<Folder>(this.detach_Folders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FolderType_Folder", Storage="_Folders", ThisKey="ID", OtherKey="FolderTypeID")]
		public EntitySet<Folder> Folders
		{
			get
			{
				return this._Folders;
			}
			set
			{
				this._Folders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Folders(Folder entity)
		{
			this.SendPropertyChanging();
			entity.FolderType = this;
		}
		
		private void detach_Folders(Folder entity)
		{
			this.SendPropertyChanging();
			entity.FolderType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Format")]
	public partial class Format : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FormatCategoryID;
		
		private string _Name;
		
		private System.Xml.Linq.XElement _FormatXml;
		
		private string _MimeType;
		
		private string _FileExtension;
		
		private EntitySet<Conversion> _Conversions;
		
		private EntitySet<File> _Files;
		
		private EntityRef<FormatCategory> _FormatCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFormatCategoryIDChanging(int value);
    partial void OnFormatCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFormatXmlChanging(System.Xml.Linq.XElement value);
    partial void OnFormatXmlChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnFileExtensionChanging(string value);
    partial void OnFileExtensionChanged();
    #endregion
		
		public Format()
		{
			this._Conversions = new EntitySet<Conversion>(new Action<Conversion>(this.attach_Conversions), new Action<Conversion>(this.detach_Conversions));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._FormatCategory = default(EntityRef<FormatCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatCategoryID", DbType="Int NOT NULL")]
		public int FormatCategoryID
		{
			get
			{
				return this._FormatCategoryID;
			}
			set
			{
				if ((this._FormatCategoryID != value))
				{
					if (this._FormatCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._FormatCategoryID = value;
					this.SendPropertyChanged("FormatCategoryID");
					this.OnFormatCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatXml", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement FormatXml
		{
			get
			{
				return this._FormatXml;
			}
			set
			{
				if ((this._FormatXml != value))
				{
					this.OnFormatXmlChanging(value);
					this.SendPropertyChanging();
					this._FormatXml = value;
					this.SendPropertyChanged("FormatXml");
					this.OnFormatXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileExtension", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FileExtension
		{
			get
			{
				return this._FileExtension;
			}
			set
			{
				if ((this._FileExtension != value))
				{
					this.OnFileExtensionChanging(value);
					this.SendPropertyChanging();
					this._FileExtension = value;
					this.SendPropertyChanged("FileExtension");
					this.OnFileExtensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Format_Conversion", Storage="_Conversions", ThisKey="ID", OtherKey="FormatID")]
		public EntitySet<Conversion> Conversions
		{
			get
			{
				return this._Conversions;
			}
			set
			{
				this._Conversions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Format_File", Storage="_Files", ThisKey="ID", OtherKey="FormatID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormatCategory_Format", Storage="_FormatCategory", ThisKey="FormatCategoryID", OtherKey="ID", IsForeignKey=true)]
		public FormatCategory FormatCategory
		{
			get
			{
				return this._FormatCategory.Entity;
			}
			set
			{
				FormatCategory previousValue = this._FormatCategory.Entity;
				if (((previousValue != value) 
							|| (this._FormatCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormatCategory.Entity = null;
						previousValue.Formats.Remove(this);
					}
					this._FormatCategory.Entity = value;
					if ((value != null))
					{
						value.Formats.Add(this);
						this._FormatCategoryID = value.ID;
					}
					else
					{
						this._FormatCategoryID = default(int);
					}
					this.SendPropertyChanged("FormatCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conversions(Conversion entity)
		{
			this.SendPropertyChanging();
			entity.Format = this;
		}
		
		private void detach_Conversions(Conversion entity)
		{
			this.SendPropertyChanging();
			entity.Format = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Format = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Format = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormatCategory")]
	public partial class FormatCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _FormatTypeID;
		
		private string _Value;
		
		private EntitySet<Conversion> _Conversions;
		
		private EntitySet<Format> _Formats;
		
		private EntityRef<FormatType> _FormatType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFormatTypeIDChanging(int value);
    partial void OnFormatTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public FormatCategory()
		{
			this._Conversions = new EntitySet<Conversion>(new Action<Conversion>(this.attach_Conversions), new Action<Conversion>(this.detach_Conversions));
			this._Formats = new EntitySet<Format>(new Action<Format>(this.attach_Formats), new Action<Format>(this.detach_Formats));
			this._FormatType = default(EntityRef<FormatType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormatTypeID", DbType="Int NOT NULL")]
		public int FormatTypeID
		{
			get
			{
				return this._FormatTypeID;
			}
			set
			{
				if ((this._FormatTypeID != value))
				{
					if (this._FormatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormatTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FormatTypeID = value;
					this.SendPropertyChanged("FormatTypeID");
					this.OnFormatTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormatCategory_Conversion", Storage="_Conversions", ThisKey="ID", OtherKey="FormatCategoryID")]
		public EntitySet<Conversion> Conversions
		{
			get
			{
				return this._Conversions;
			}
			set
			{
				this._Conversions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormatCategory_Format", Storage="_Formats", ThisKey="ID", OtherKey="FormatCategoryID")]
		public EntitySet<Format> Formats
		{
			get
			{
				return this._Formats;
			}
			set
			{
				this._Formats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormatType_FormatCategory", Storage="_FormatType", ThisKey="FormatTypeID", OtherKey="ID", IsForeignKey=true)]
		public FormatType FormatType
		{
			get
			{
				return this._FormatType.Entity;
			}
			set
			{
				FormatType previousValue = this._FormatType.Entity;
				if (((previousValue != value) 
							|| (this._FormatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FormatType.Entity = null;
						previousValue.FormatCategories.Remove(this);
					}
					this._FormatType.Entity = value;
					if ((value != null))
					{
						value.FormatCategories.Add(this);
						this._FormatTypeID = value.ID;
					}
					else
					{
						this._FormatTypeID = default(int);
					}
					this.SendPropertyChanged("FormatType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conversions(Conversion entity)
		{
			this.SendPropertyChanging();
			entity.FormatCategory = this;
		}
		
		private void detach_Conversions(Conversion entity)
		{
			this.SendPropertyChanging();
			entity.FormatCategory = null;
		}
		
		private void attach_Formats(Format entity)
		{
			this.SendPropertyChanging();
			entity.FormatCategory = this;
		}
		
		private void detach_Formats(Format entity)
		{
			this.SendPropertyChanging();
			entity.FormatCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FormatType")]
	public partial class FormatType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private EntitySet<FormatCategory> _FormatCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public FormatType()
		{
			this._FormatCategories = new EntitySet<FormatCategory>(new Action<FormatCategory>(this.attach_FormatCategories), new Action<FormatCategory>(this.detach_FormatCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FormatType_FormatCategory", Storage="_FormatCategories", ThisKey="ID", OtherKey="FormatTypeID")]
		public EntitySet<FormatCategory> FormatCategories
		{
			get
			{
				return this._FormatCategories;
			}
			set
			{
				this._FormatCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormatCategories(FormatCategory entity)
		{
			this.SendPropertyChanging();
			entity.FormatType = this;
		}
		
		private void detach_FormatCategories(FormatCategory entity)
		{
			this.SendPropertyChanging();
			entity.FormatType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Language")]
	public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _LanguageCode;
		
		private string _CountryName;
		
		private EntitySet<Metadata> _Metadatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Language()
		{
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Metadata", Storage="_Metadatas", ThisKey="ID", OtherKey="LanguageID")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Language = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Language = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Metadata")]
	public partial class Metadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ObjectID;
		
		private System.Nullable<int> _LanguageID;
		
		private int _MetadataSchemaID;
		
		private System.Xml.Linq.XElement _MetadataXml;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateModified;
		
		private System.DateTime _DateLocked;
		
		private System.Nullable<int> _LockUserID;
		
		private EntityRef<Language> _Language;
		
		private EntityRef<MetadataSchema> _MetadataSchema;
		
		private EntityRef<Object> _Object;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnLanguageIDChanging(System.Nullable<int> value);
    partial void OnLanguageIDChanged();
    partial void OnMetadataSchemaIDChanging(int value);
    partial void OnMetadataSchemaIDChanged();
    partial void OnMetadataXmlChanging(System.Xml.Linq.XElement value);
    partial void OnMetadataXmlChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    partial void OnDateLockedChanging(System.DateTime value);
    partial void OnDateLockedChanged();
    partial void OnLockUserIDChanging(System.Nullable<int> value);
    partial void OnLockUserIDChanged();
    #endregion
		
		public Metadata()
		{
			this._Language = default(EntityRef<Language>);
			this._MetadataSchema = default(EntityRef<MetadataSchema>);
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL")]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int")]
		public System.Nullable<int> LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					if (this._Language.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataSchemaID", DbType="Int NOT NULL")]
		public int MetadataSchemaID
		{
			get
			{
				return this._MetadataSchemaID;
			}
			set
			{
				if ((this._MetadataSchemaID != value))
				{
					if (this._MetadataSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetadataSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._MetadataSchemaID = value;
					this.SendPropertyChanged("MetadataSchemaID");
					this.OnMetadataSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataXml", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement MetadataXml
		{
			get
			{
				return this._MetadataXml;
			}
			set
			{
				if ((this._MetadataXml != value))
				{
					this.OnMetadataXmlChanging(value);
					this.SendPropertyChanging();
					this._MetadataXml = value;
					this.SendPropertyChanged("MetadataXml");
					this.OnMetadataXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLocked", DbType="DateTime NOT NULL")]
		public System.DateTime DateLocked
		{
			get
			{
				return this._DateLocked;
			}
			set
			{
				if ((this._DateLocked != value))
				{
					this.OnDateLockedChanging(value);
					this.SendPropertyChanging();
					this._DateLocked = value;
					this.SendPropertyChanged("DateLocked");
					this.OnDateLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockUserID", DbType="Int")]
		public System.Nullable<int> LockUserID
		{
			get
			{
				return this._LockUserID;
			}
			set
			{
				if ((this._LockUserID != value))
				{
					this.OnLockUserIDChanging(value);
					this.SendPropertyChanging();
					this._LockUserID = value;
					this.SendPropertyChanged("LockUserID");
					this.OnLockUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Language_Metadata", Storage="_Language", ThisKey="LanguageID", OtherKey="ID", IsForeignKey=true)]
		public Language Language
		{
			get
			{
				return this._Language.Entity;
			}
			set
			{
				Language previousValue = this._Language.Entity;
				if (((previousValue != value) 
							|| (this._Language.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Language.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._Language.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._LanguageID = value.ID;
					}
					else
					{
						this._LanguageID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Language");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataSchema_Metadata", Storage="_MetadataSchema", ThisKey="MetadataSchemaID", OtherKey="ID", IsForeignKey=true)]
		public MetadataSchema MetadataSchema
		{
			get
			{
				return this._MetadataSchema.Entity;
			}
			set
			{
				MetadataSchema previousValue = this._MetadataSchema.Entity;
				if (((previousValue != value) 
							|| (this._MetadataSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetadataSchema.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._MetadataSchema.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._MetadataSchemaID = value.ID;
					}
					else
					{
						this._MetadataSchemaID = default(int);
					}
					this.SendPropertyChanged("MetadataSchema");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Metadata", Storage="_Object", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.Metadatas.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.Metadatas.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MetadataSchema")]
	public partial class MetadataSchema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _GUID;
		
		private string _name;
		
		private System.Xml.Linq.XElement _SchemaXml;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<Metadata> _Metadatas;
		
		private EntitySet<MetadataSchema_Group_Join> _MetadataSchema_Group_Joins;
		
		private EntitySet<MetadataSchema_User_Join> _MetadataSchema_User_Joins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnSchemaXmlChanging(System.Xml.Linq.XElement value);
    partial void OnSchemaXmlChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public MetadataSchema()
		{
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			this._MetadataSchema_Group_Joins = new EntitySet<MetadataSchema_Group_Join>(new Action<MetadataSchema_Group_Join>(this.attach_MetadataSchema_Group_Joins), new Action<MetadataSchema_Group_Join>(this.detach_MetadataSchema_Group_Joins));
			this._MetadataSchema_User_Joins = new EntitySet<MetadataSchema_User_Join>(new Action<MetadataSchema_User_Join>(this.attach_MetadataSchema_User_Joins), new Action<MetadataSchema_User_Join>(this.detach_MetadataSchema_User_Joins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaXml", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement SchemaXml
		{
			get
			{
				return this._SchemaXml;
			}
			set
			{
				if ((this._SchemaXml != value))
				{
					this.OnSchemaXmlChanging(value);
					this.SendPropertyChanging();
					this._SchemaXml = value;
					this.SendPropertyChanged("SchemaXml");
					this.OnSchemaXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataSchema_Metadata", Storage="_Metadatas", ThisKey="ID", OtherKey="MetadataSchemaID")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataSchema_MetadataSchema_Group_Join", Storage="_MetadataSchema_Group_Joins", ThisKey="ID", OtherKey="MetadataSchemaID")]
		public EntitySet<MetadataSchema_Group_Join> MetadataSchema_Group_Joins
		{
			get
			{
				return this._MetadataSchema_Group_Joins;
			}
			set
			{
				this._MetadataSchema_Group_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataSchema_MetadataSchema_User_Join", Storage="_MetadataSchema_User_Joins", ThisKey="ID", OtherKey="MetadataSchemaID")]
		public EntitySet<MetadataSchema_User_Join> MetadataSchema_User_Joins
		{
			get
			{
				return this._MetadataSchema_User_Joins;
			}
			set
			{
				this._MetadataSchema_User_Joins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.MetadataSchema = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.MetadataSchema = null;
		}
		
		private void attach_MetadataSchema_Group_Joins(MetadataSchema_Group_Join entity)
		{
			this.SendPropertyChanging();
			entity.MetadataSchema = this;
		}
		
		private void detach_MetadataSchema_Group_Joins(MetadataSchema_Group_Join entity)
		{
			this.SendPropertyChanging();
			entity.MetadataSchema = null;
		}
		
		private void attach_MetadataSchema_User_Joins(MetadataSchema_User_Join entity)
		{
			this.SendPropertyChanging();
			entity.MetadataSchema = this;
		}
		
		private void detach_MetadataSchema_User_Joins(MetadataSchema_User_Join entity)
		{
			this.SendPropertyChanging();
			entity.MetadataSchema = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MetadataSchema_Group_Join")]
	public partial class MetadataSchema_Group_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MetadataSchemaID;
		
		private System.Guid _GroupGUID;
		
		private int _Permission;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<MetadataSchema> _MetadataSchema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetadataSchemaIDChanging(int value);
    partial void OnMetadataSchemaIDChanged();
    partial void OnGroupGUIDChanging(System.Guid value);
    partial void OnGroupGUIDChanged();
    partial void OnPermissionChanging(int value);
    partial void OnPermissionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public MetadataSchema_Group_Join()
		{
			this._MetadataSchema = default(EntityRef<MetadataSchema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataSchemaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MetadataSchemaID
		{
			get
			{
				return this._MetadataSchemaID;
			}
			set
			{
				if ((this._MetadataSchemaID != value))
				{
					if (this._MetadataSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetadataSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._MetadataSchemaID = value;
					this.SendPropertyChanged("MetadataSchemaID");
					this.OnMetadataSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupGUID
		{
			get
			{
				return this._GroupGUID;
			}
			set
			{
				if ((this._GroupGUID != value))
				{
					this.OnGroupGUIDChanging(value);
					this.SendPropertyChanging();
					this._GroupGUID = value;
					this.SendPropertyChanged("GroupGUID");
					this.OnGroupGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Int NOT NULL")]
		public int Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataSchema_MetadataSchema_Group_Join", Storage="_MetadataSchema", ThisKey="MetadataSchemaID", OtherKey="ID", IsForeignKey=true)]
		public MetadataSchema MetadataSchema
		{
			get
			{
				return this._MetadataSchema.Entity;
			}
			set
			{
				MetadataSchema previousValue = this._MetadataSchema.Entity;
				if (((previousValue != value) 
							|| (this._MetadataSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetadataSchema.Entity = null;
						previousValue.MetadataSchema_Group_Joins.Remove(this);
					}
					this._MetadataSchema.Entity = value;
					if ((value != null))
					{
						value.MetadataSchema_Group_Joins.Add(this);
						this._MetadataSchemaID = value.ID;
					}
					else
					{
						this._MetadataSchemaID = default(int);
					}
					this.SendPropertyChanged("MetadataSchema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MetadataSchema_User_Join")]
	public partial class MetadataSchema_User_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MetadataSchemaID;
		
		private System.Guid _UserGUID;
		
		private int _Permission;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<MetadataSchema> _MetadataSchema;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMetadataSchemaIDChanging(int value);
    partial void OnMetadataSchemaIDChanged();
    partial void OnUserGUIDChanging(System.Guid value);
    partial void OnUserGUIDChanged();
    partial void OnPermissionChanging(int value);
    partial void OnPermissionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public MetadataSchema_User_Join()
		{
			this._MetadataSchema = default(EntityRef<MetadataSchema>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetadataSchemaID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MetadataSchemaID
		{
			get
			{
				return this._MetadataSchemaID;
			}
			set
			{
				if ((this._MetadataSchemaID != value))
				{
					if (this._MetadataSchema.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetadataSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._MetadataSchemaID = value;
					this.SendPropertyChanged("MetadataSchemaID");
					this.OnMetadataSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Int NOT NULL")]
		public int Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MetadataSchema_MetadataSchema_User_Join", Storage="_MetadataSchema", ThisKey="MetadataSchemaID", OtherKey="ID", IsForeignKey=true)]
		public MetadataSchema MetadataSchema
		{
			get
			{
				return this._MetadataSchema.Entity;
			}
			set
			{
				MetadataSchema previousValue = this._MetadataSchema.Entity;
				if (((previousValue != value) 
							|| (this._MetadataSchema.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MetadataSchema.Entity = null;
						previousValue.MetadataSchema_User_Joins.Remove(this);
					}
					this._MetadataSchema.Entity = value;
					if ((value != null))
					{
						value.MetadataSchema_User_Joins.Add(this);
						this._MetadataSchemaID = value.ID;
					}
					else
					{
						this._MetadataSchemaID = default(int);
					}
					this.SendPropertyChanged("MetadataSchema");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Object")]
	public partial class Object : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _GUID;
		
		private int _ObjectTypeID;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<AccessPoint_Object_Join> _AccessPoint_Object_Joins;
		
		private EntitySet<File> _Files;
		
		private EntitySet<Metadata> _Metadatas;
		
		private EntitySet<Object_Folder_Join> _Object_Folder_Joins;
		
		private EntitySet<Object_Object_Join> _Object_Object_Joins;
		
		private EntitySet<Object_Object_Join> _Object_Object_Joins1;
		
		private EntityRef<ObjectType> _ObjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnObjectTypeIDChanging(int value);
    partial void OnObjectTypeIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Object()
		{
			this._AccessPoint_Object_Joins = new EntitySet<AccessPoint_Object_Join>(new Action<AccessPoint_Object_Join>(this.attach_AccessPoint_Object_Joins), new Action<AccessPoint_Object_Join>(this.detach_AccessPoint_Object_Joins));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._Metadatas = new EntitySet<Metadata>(new Action<Metadata>(this.attach_Metadatas), new Action<Metadata>(this.detach_Metadatas));
			this._Object_Folder_Joins = new EntitySet<Object_Folder_Join>(new Action<Object_Folder_Join>(this.attach_Object_Folder_Joins), new Action<Object_Folder_Join>(this.detach_Object_Folder_Joins));
			this._Object_Object_Joins = new EntitySet<Object_Object_Join>(new Action<Object_Object_Join>(this.attach_Object_Object_Joins), new Action<Object_Object_Join>(this.detach_Object_Object_Joins));
			this._Object_Object_Joins1 = new EntitySet<Object_Object_Join>(new Action<Object_Object_Join>(this.attach_Object_Object_Joins1), new Action<Object_Object_Join>(this.detach_Object_Object_Joins1));
			this._ObjectType = default(EntityRef<ObjectType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectTypeID", DbType="Int NOT NULL")]
		public int ObjectTypeID
		{
			get
			{
				return this._ObjectTypeID;
			}
			set
			{
				if ((this._ObjectTypeID != value))
				{
					if (this._ObjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectTypeID = value;
					this.SendPropertyChanged("ObjectTypeID");
					this.OnObjectTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_AccessPoint_Object_Join", Storage="_AccessPoint_Object_Joins", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<AccessPoint_Object_Join> AccessPoint_Object_Joins
		{
			get
			{
				return this._AccessPoint_Object_Joins;
			}
			set
			{
				this._AccessPoint_Object_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_File", Storage="_Files", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Metadata", Storage="_Metadatas", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<Metadata> Metadatas
		{
			get
			{
				return this._Metadatas;
			}
			set
			{
				this._Metadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Object_Folder_Join", Storage="_Object_Folder_Joins", ThisKey="ID", OtherKey="ObjectID")]
		public EntitySet<Object_Folder_Join> Object_Folder_Joins
		{
			get
			{
				return this._Object_Folder_Joins;
			}
			set
			{
				this._Object_Folder_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Object_Object_Join", Storage="_Object_Object_Joins", ThisKey="ID", OtherKey="ObjectID1")]
		public EntitySet<Object_Object_Join> Object_Object_Joins
		{
			get
			{
				return this._Object_Object_Joins;
			}
			set
			{
				this._Object_Object_Joins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Object_Object_Join1", Storage="_Object_Object_Joins1", ThisKey="ID", OtherKey="ObjectID2")]
		public EntitySet<Object_Object_Join> Object_Object_Joins1
		{
			get
			{
				return this._Object_Object_Joins1;
			}
			set
			{
				this._Object_Object_Joins1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectType_Object", Storage="_ObjectType", ThisKey="ObjectTypeID", OtherKey="ID", IsForeignKey=true)]
		public ObjectType ObjectType
		{
			get
			{
				return this._ObjectType.Entity;
			}
			set
			{
				ObjectType previousValue = this._ObjectType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectType.Entity = null;
						previousValue.Objects.Remove(this);
					}
					this._ObjectType.Entity = value;
					if ((value != null))
					{
						value.Objects.Add(this);
						this._ObjectTypeID = value.ID;
					}
					else
					{
						this._ObjectTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessPoint_Object_Joins(AccessPoint_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_AccessPoint_Object_Joins(AccessPoint_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
		
		private void attach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_Metadatas(Metadata entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
		
		private void attach_Object_Folder_Joins(Object_Folder_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_Object_Folder_Joins(Object_Folder_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
		
		private void attach_Object_Object_Joins(Object_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_Object_Object_Joins(Object_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
		
		private void attach_Object_Object_Joins1(Object_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object1 = this;
		}
		
		private void detach_Object_Object_Joins1(Object_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.Object1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Object_Folder_Join")]
	public partial class Object_Folder_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectID;
		
		private int _FolderID;
		
		private bool _IsShortcut;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Folder> _Folder;
		
		private EntityRef<Object> _Object;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnFolderIDChanging(int value);
    partial void OnFolderIDChanged();
    partial void OnIsShortcutChanging(bool value);
    partial void OnIsShortcutChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Object_Folder_Join()
		{
			this._Folder = default(EntityRef<Folder>);
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FolderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FolderID
		{
			get
			{
				return this._FolderID;
			}
			set
			{
				if ((this._FolderID != value))
				{
					if (this._Folder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFolderIDChanging(value);
					this.SendPropertyChanging();
					this._FolderID = value;
					this.SendPropertyChanged("FolderID");
					this.OnFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsShortcut", DbType="Bit NOT NULL")]
		public bool IsShortcut
		{
			get
			{
				return this._IsShortcut;
			}
			set
			{
				if ((this._IsShortcut != value))
				{
					this.OnIsShortcutChanging(value);
					this.SendPropertyChanging();
					this._IsShortcut = value;
					this.SendPropertyChanged("IsShortcut");
					this.OnIsShortcutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Folder_Object_Folder_Join", Storage="_Folder", ThisKey="FolderID", OtherKey="ID", IsForeignKey=true)]
		public Folder Folder
		{
			get
			{
				return this._Folder.Entity;
			}
			set
			{
				Folder previousValue = this._Folder.Entity;
				if (((previousValue != value) 
							|| (this._Folder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Folder.Entity = null;
						previousValue.Object_Folder_Joins.Remove(this);
					}
					this._Folder.Entity = value;
					if ((value != null))
					{
						value.Object_Folder_Joins.Add(this);
						this._FolderID = value.ID;
					}
					else
					{
						this._FolderID = default(int);
					}
					this.SendPropertyChanged("Folder");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Object_Folder_Join", Storage="_Object", ThisKey="ObjectID", OtherKey="ID", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.Object_Folder_Joins.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.Object_Folder_Joins.Add(this);
						this._ObjectID = value.ID;
					}
					else
					{
						this._ObjectID = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Object_Object_Join")]
	public partial class Object_Object_Join : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObjectID1;
		
		private int _ObjectID2;
		
		private int _ObjectRelationTypeID;
		
		private System.Nullable<int> _Sequence;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Object> _Object;
		
		private EntityRef<Object> _Object1;
		
		private EntityRef<ObjectRelationType> _ObjectRelationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectID1Changing(int value);
    partial void OnObjectID1Changed();
    partial void OnObjectID2Changing(int value);
    partial void OnObjectID2Changed();
    partial void OnObjectRelationTypeIDChanging(int value);
    partial void OnObjectRelationTypeIDChanged();
    partial void OnSequenceChanging(System.Nullable<int> value);
    partial void OnSequenceChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public Object_Object_Join()
		{
			this._Object = default(EntityRef<Object>);
			this._Object1 = default(EntityRef<Object>);
			this._ObjectRelationType = default(EntityRef<ObjectRelationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID1
		{
			get
			{
				return this._ObjectID1;
			}
			set
			{
				if ((this._ObjectID1 != value))
				{
					if (this._Object.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectID1Changing(value);
					this.SendPropertyChanging();
					this._ObjectID1 = value;
					this.SendPropertyChanged("ObjectID1");
					this.OnObjectID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ObjectID2
		{
			get
			{
				return this._ObjectID2;
			}
			set
			{
				if ((this._ObjectID2 != value))
				{
					if (this._Object1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectID2Changing(value);
					this.SendPropertyChanging();
					this._ObjectID2 = value;
					this.SendPropertyChanged("ObjectID2");
					this.OnObjectID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectRelationTypeID", DbType="Int NOT NULL")]
		public int ObjectRelationTypeID
		{
			get
			{
				return this._ObjectRelationTypeID;
			}
			set
			{
				if ((this._ObjectRelationTypeID != value))
				{
					if (this._ObjectRelationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectRelationTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectRelationTypeID = value;
					this.SendPropertyChanged("ObjectRelationTypeID");
					this.OnObjectRelationTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sequence", DbType="Int")]
		public System.Nullable<int> Sequence
		{
			get
			{
				return this._Sequence;
			}
			set
			{
				if ((this._Sequence != value))
				{
					this.OnSequenceChanging(value);
					this.SendPropertyChanging();
					this._Sequence = value;
					this.SendPropertyChanged("Sequence");
					this.OnSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Object_Object_Join", Storage="_Object", ThisKey="ObjectID1", OtherKey="ID", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.Object_Object_Joins.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.Object_Object_Joins.Add(this);
						this._ObjectID1 = value.ID;
					}
					else
					{
						this._ObjectID1 = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_Object_Object_Join1", Storage="_Object1", ThisKey="ObjectID2", OtherKey="ID", IsForeignKey=true)]
		public Object Object1
		{
			get
			{
				return this._Object1.Entity;
			}
			set
			{
				Object previousValue = this._Object1.Entity;
				if (((previousValue != value) 
							|| (this._Object1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object1.Entity = null;
						previousValue.Object_Object_Joins1.Remove(this);
					}
					this._Object1.Entity = value;
					if ((value != null))
					{
						value.Object_Object_Joins1.Add(this);
						this._ObjectID2 = value.ID;
					}
					else
					{
						this._ObjectID2 = default(int);
					}
					this.SendPropertyChanged("Object1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectRelationType_Object_Object_Join", Storage="_ObjectRelationType", ThisKey="ObjectRelationTypeID", OtherKey="ID", IsForeignKey=true)]
		public ObjectRelationType ObjectRelationType
		{
			get
			{
				return this._ObjectRelationType.Entity;
			}
			set
			{
				ObjectRelationType previousValue = this._ObjectRelationType.Entity;
				if (((previousValue != value) 
							|| (this._ObjectRelationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectRelationType.Entity = null;
						previousValue.Object_Object_Joins.Remove(this);
					}
					this._ObjectRelationType.Entity = value;
					if ((value != null))
					{
						value.Object_Object_Joins.Add(this);
						this._ObjectRelationTypeID = value.ID;
					}
					else
					{
						this._ObjectRelationTypeID = default(int);
					}
					this.SendPropertyChanged("ObjectRelationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectRelationType")]
	public partial class ObjectRelationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Value;
		
		private EntitySet<Object_Object_Join> _Object_Object_Joins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ObjectRelationType()
		{
			this._Object_Object_Joins = new EntitySet<Object_Object_Join>(new Action<Object_Object_Join>(this.attach_Object_Object_Joins), new Action<Object_Object_Join>(this.detach_Object_Object_Joins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectRelationType_Object_Object_Join", Storage="_Object_Object_Joins", ThisKey="ID", OtherKey="ObjectRelationTypeID")]
		public EntitySet<Object_Object_Join> Object_Object_Joins
		{
			get
			{
				return this._Object_Object_Joins;
			}
			set
			{
				this._Object_Object_Joins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Object_Object_Joins(Object_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.ObjectRelationType = this;
		}
		
		private void detach_Object_Object_Joins(Object_Object_Join entity)
		{
			this.SendPropertyChanging();
			entity.ObjectRelationType = null;
		}
	}
}
#pragma warning restore 1591
